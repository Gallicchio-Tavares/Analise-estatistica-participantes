C√âLULA 1 (IMPORTS E PRE PROCESSAMENTO B√ÅSICO):

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from collections import Counter
from wordcloud import WordCloud

# Configura√ß√µes visuais
plt.style.use('default')
sns.set_theme(style="whitegrid")
sns.set_palette("viridis")

# Carregar dados
df = pd.read_csv('teste.csv')

# Pr√©-processamento b√°sico
df['D√©cada'] = (df['Ano'] // 10) * 10
participantes_excluidos = ['aNobree', 'Tunim73']
df_filtrado = df[~df['Assistido por'].isin(participantes_excluidos)].copy()

# Criar DataFrame √∫nico por filme (para an√°lises gerais)
df_unicos = df.drop_duplicates(subset=['T√≠tulo original']).copy()
df_unicos_filtrado = df_unicos[~df_unicos['Assistido por'].isin(participantes_excluidos)]

C√âLULA 2 (HISTOGRAMA DA DURA√á√ÉO DOS FILMES):

# Usar df_unicos para an√°lise de dura√ß√£o (evita contar o mesmo filme m√∫ltiplas vezes)
filme_mais_longo = df_unicos.loc[df_unicos['Dura√ß√£o'].idxmax()]
filme_mais_curto = df_unicos.loc[df_unicos['Dura√ß√£o'].idxmin()]

media_duracao = df_unicos['Dura√ß√£o'].mean()
mediana_duracao = df_unicos['Dura√ß√£o'].median()
moda_duracao = df_unicos['Dura√ß√£o'].mode()[0]

print("‚ïê" * 60)
print("AN√ÅLISE DE DURA√á√ÉO DOS FILMES √öNICOS".center(60))
print("‚ïê" * 60)
print(f"\nFILME MAIS LONGO: {filme_mais_longo['Filme']} ({filme_mais_longo['Dura√ß√£o']} minutos)")
print(f"FILME MAIS CURTO: {filme_mais_curto['Filme']} ({filme_mais_curto['Dura√ß√£o']} minutos)")
print(f"\nTotal de filmes √∫nicos: {len(df_unicos)}")
print(f"M√©dia de dura√ß√£o: {media_duracao:.2f} minutos")
print(f"Mediana de dura√ß√£o: {mediana_duracao} minutos")
print(f"Moda de dura√ß√£o: {moda_duracao} minutos")

# BINS FIXOS de 10 em 10 minutos - come√ßando de 60min
min_duracao = 60  # Valor m√≠nimo garantido
max_duracao = df_unicos['Dura√ß√£o'].max()
bins = list(range(min_duracao, max_duracao + 20, 10))  # +20 para garantir que cubra o m√°ximo

# Visualiza√ß√£o com bins fixos
plt.figure(figsize=(14, 7))
ax = sns.histplot(df_unicos['Dura√ß√£o'], bins=bins, kde=True, alpha=0.7)

# Adicionar linhas de refer√™ncia
plt.axvline(media_duracao, color='red', linestyle='dashed', linewidth=2, label=f'M√©dia: {media_duracao:.2f} min')
plt.axvline(mediana_duracao, color='green', linestyle='dashed', linewidth=2, label=f'Mediana: {mediana_duracao} min')
plt.axvline(moda_duracao, color='blue', linestyle='dashed', linewidth=2, label=f'Moda: {moda_duracao} min')

# Adicionar contagens em cada barra
for rect in ax.patches:
    height = rect.get_height()
    if height > 0:
        ax.text(rect.get_x() + rect.get_width() / 2, height + 0.1,
                f'{int(height)}', ha='center', va='bottom', fontsize=9)

plt.title('Distribui√ß√£o da Dura√ß√£o dos Filmes √önicos Assistidos\n(Bins de 10 em 10 minutos)', fontsize=14, pad=20)
plt.xlabel('Dura√ß√£o (minutos)', fontsize=12)
plt.ylabel('Quantidade de Filmes √önicos', fontsize=12)
plt.legend()
plt.grid(True, alpha=0.3, axis='y')
plt.xticks(bins, rotation=45)  # Mostrar todos os bins no eixo X
plt.tight_layout()
plt.show()

# An√°lise adicional por faixa de dura√ß√£o
print("\n" + "‚ïê" * 60)
print("DISTRIBUI√á√ÉO POR FAIXA DE DURA√á√ÉO".center(60))
print("‚ïê" * 60)

# Calcular distribui√ß√£o por faixas de 10min
faixas = []
for i in range(len(bins) - 1):
    faixa_min = bins[i]
    faixa_max = bins[i + 1]
    count = len(df_unicos[(df_unicos['Dura√ß√£o'] >= faixa_min) & (df_unicos['Dura√ß√£o'] < faixa_max)])
    if count > 0:
        faixas.append((f"{faixa_min}-{faixa_max-1}min", count))

# Ordenar por quantidade
faixas.sort(key=lambda x: x[1], reverse=True)

print("\nTop faixas de dura√ß√£o:")
for faixa, count in faixas[:10]:  # Top 10 faixas
    print(f"{faixa}: {count} filmes")

# Estat√≠sticas das faixas
print(f"\nFaixa mais comum: {faixas[0][0]} ({faixas[0][1]} filmes)")
print(f"Total de faixas com filmes: {len(faixas)}")

C√âLULA 3 (TEMPO ASSISTIDO POR PESSOA):

# Para tempo total, usamos todos os registros (cada visualiza√ß√£o conta)
tempo_total = df_filtrado.groupby('Assistido por')['Dura√ß√£o'].sum().sort_values()
tempo_df = pd.DataFrame({'Pessoa': tempo_total.index, 'Minutos': tempo_total.values})

print("‚ïê" * 60)
print("TEMPO TOTAL ASSISTIDO POR PESSOA".center(60))
print("‚ïê" * 60)
print("(Inclui m√∫ltiplas visualiza√ß√µes do mesmo filme)")

plt.figure(figsize=(12, 6))
ax = sns.barplot(data=tempo_df, x='Minutos', y='Pessoa', hue='Pessoa', dodge=False, legend=False)

for i, (idx, row) in enumerate(tempo_df.iterrows()):
    horas = row['Minutos'] // 60
    minutos = row['Minutos'] % 60
    ax.text(row['Minutos'] + 5, i, f"{horas}h{minutos:02d}m", va='center')

plt.title('Tempo Total Assistido por Pessoa\n(Inclui filmes repetidos)')
plt.xlabel('Minutos Totais')
plt.ylabel('Pessoa')
plt.grid(axis='x', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

C√âLULA 4 (Vis√£o Geral dos g√™neros):

# Para g√™neros, usamos filmes √∫nicos para n√£o distorcer a an√°lise
df_generos = df_unicos.assign(G√™nero=df_unicos['G√™nero'].str.split(', ')).explode('G√™nero')

# WordCloud com filmes √∫nicos
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(
    df_generos['G√™nero'].value_counts().to_dict())

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud)
plt.axis('off')
plt.title('Distribui√ß√£o de G√™neros (Filmes √önicos)')
plt.show()

# Top g√™neros
top_generos = df_generos['G√™nero'].value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_generos.values, y=top_generos.index)
plt.title('Top 10 G√™neros (Filmes √önicos)')
plt.xlabel('Quantidade de Filmes √önicos')
plt.ylabel('G√™nero')
plt.tight_layout()
plt.show()

C√âLULA 5 (GENEROS VISTOS POR CADA PARTICIPANTE):

# Expandir g√™neros (separados por v√≠rgula) em linhas individuais
df_expandido = df.assign(G√™nero=df['G√™nero'].str.split(', ')).explode('G√™nero')

# Agrupar por participante e contar g√™neros
generos_por_participante = df_expandido.groupby('Assistido por')['G√™nero'].apply(list)

## --- Fun√ß√£o para Plotar Gr√°fico de G√™neros por Participante ---
def plot_generos_participante(participante, generos):
    # Contar ocorr√™ncias de cada g√™nero
    contagem = Counter(generos)
    generos_top = [g[0] for g in contagem.most_common(5) if g[1] > 1]  # Top 5 g√™neros
    outros = [g for g in contagem if g not in generos_top]
    
    # Preparar dados para o gr√°fico
    dados = {}
    for g in generos_top:
        dados[g] = contagem[g]
    if outros:
        dados['Outros'] = sum(contagem[g] for g in outros)
    
    # Ordenar do maior para o menor
    dados = dict(sorted(dados.items(), key=lambda item: item[1], reverse=True))
    
    # Criar gr√°fico de pizza
    fig, ax = plt.subplots(figsize=(10, 6))
    wedges, texts, autotexts = ax.pie(
        dados.values(),
        labels=dados.keys(),
        autopct=lambda p: f'{p:.1f}%\n({int(round(p/100.*sum(dados.values())))})',
        startangle=90,
        colors=sns.color_palette("Set3"),
        textprops={'fontsize': 9},
        pctdistance=0.85
    )
    
    # Melhorar legibilidade
    plt.setp(autotexts, size=9, weight="bold")
    ax.set_title(f'Distribui√ß√£o de G√™neros Assistidos por {participante}', 
                 pad=20, fontsize=12)
    
    # Adicionar c√≠rculo central para estilo 'donut'
    centre_circle = plt.Circle((0,0),0.70,fc='white')
    fig.gca().add_artist(centre_circle)
    
    plt.tight_layout()
    plt.show()
    
    # Listar g√™neros √∫nicos (para refer√™ncia)
    print(f"\nG√™neros √∫nicos assistidos por {participante}:")
    print(", ".join(sorted(contagem.keys())))
    print(f"\nContagem detalhada:")
    for genero, qtd in contagem.most_common():
        print(f"- {genero}: {qtd} filme{'s' if qtd > 1 else ''}")
    print("\n" + "="*60 + "\n")

## --- Gerar Gr√°ficos para Cada Participante ---
for participante, generos in generos_por_participante.items():
    plot_generos_participante(participante, generos)

## --- Gr√°fico de G√™neros Mais Populares (Todos Participantes) ---
plt.figure(figsize=(12, 6))

C√âLULA 6 (BREVE AN√ÅLISE DE CADA PARTICIPANTE):
# Para an√°lise por participante, mantemos todos os registros
print("‚ïê" * 60)
print("ESTAT√çSTICAS POR PARTICIPANTE".center(60))
print("‚ïê" * 60)

for participante in df_filtrado['Assistido por'].unique():
    filmes_participante = df_filtrado[df_filtrado['Assistido por'] == participante]
    filmes_unicos = filmes_participante.drop_duplicates(subset=['T√≠tulo original'])
    
    print(f"\nüé¨ {participante}:")
    print(f"   ‚Ä¢ Total de visualiza√ß√µes: {len(filmes_participante)}")
    print(f"   ‚Ä¢ Filmes √∫nicos assistidos: {len(filmes_unicos)}")
    print(f"   ‚Ä¢ Tempo total: {filmes_participante['Dura√ß√£o'].sum()} minutos")
    
    if len(filmes_unicos) > 0:
        decada_top = filmes_unicos['D√©cada'].value_counts().idxmax()
        print(f"   ‚Ä¢ D√©cada preferida: {decada_top}s")

C√âLULA 7 (DISTRIBUI√á√ÉO DE D√âCADAS):

filme_mais_antigo = df.loc[df['Ano'].idxmin()]
ano_mais_novo = df['Ano'].max()
filmes_mais_novos = df[df['Ano'] == ano_mais_novo]

media_ano = df['Ano'].mean()
mediana_ano = df['Ano'].median()
moda_ano = df['Ano'].mode()[0]

print(f"Filme mais antigo: {filme_mais_antigo['Filme']} ({filme_mais_antigo['Ano']})")
print(f"Filmes mais novos ({ano_mais_novo}):")
for idx, filme in filmes_mais_novos.iterrows():
    print(f"  - {filme['Filme']} ({filme['Pa√≠s']})")
print(f"M√©dia dos anos: {media_ano:.2f}")
print(f"Mediana dos anos: {mediana_ano}")
print(f"Moda dos anos: {moda_ano}")

df['Decada'] = (df['Ano'] // 10) * 10

# Contar quantos filmes temos em cada d√©cada
filmes_por_decada = df['Decada'].value_counts().sort_index()

# Plotando o gr√°fico
plt.figure(figsize=(12, 6))

# Vers√£o corrigida do barplot (resolvendo o warning da palette)
ax = sns.barplot(
    x=filmes_por_decada.index.astype(str),  # Convertendo para string para evitar confus√£o num√©rica
    y=filmes_por_decada.values,
    hue=filmes_por_decada.index,  # Adicionado para resolver o warning da palette
    palette="viridis",
    edgecolor='black',
    linewidth=0.5,
    dodge=False,  # Evita separa√ß√£o de barras quando usamos hue
    legend=False  # N√£o mostra a legenda do hue
)

# Adicionando os valores no topo de cada barra
for i, valor in enumerate(filmes_por_decada.values):
    ax.text(
        i, 
        valor + 0.2,
        f'{valor}', 
        ha='center',
        va='bottom',
        fontsize=10,
        fontweight='bold'
    )

# Vers√£o corrigida para r√≥tulos das d√©cadas (resolvendo o warning set_ticklabels)
decadas = [f"{int(decada)}s" for decada in filmes_por_decada.index]
ax.set_xticks(range(len(decadas)))  # Define os ticks primeiro
ax.set_xticklabels(decadas)  # Agora pode definir os labels com seguran√ßa

# Melhorando a formata√ß√£o
plt.title('Distribui√ß√£o de Filmes Assistidos por D√©cada', pad=20, fontsize=14, fontweight='bold')
plt.xlabel('D√©cada de Lan√ßamento', labelpad=10)
plt.ylabel('Quantidade de Filmes', labelpad=10)
plt.ylim(0, filmes_por_decada.max() * 1.1)
plt.grid(axis='y', linestyle='--', alpha=0.7)
sns.despine(left=True, bottom=True)

plt.tight_layout()
plt.show()

C√âLULA 8 (DISTRIBUI√á√ÉO DE D√âCADAS ALT):

# Filtrar participantes que n√£o ser√£o inclu√≠dos
participantes_excluidos = ['aNobree', 'Tunim73']
df_filtrado = df[~df['Assistido por'].isin(participantes_excluidos)].copy()

# Criar coluna de d√©cada usando .loc
df_filtrado.loc[:, 'D√©cada'] = (df_filtrado['Ano'] // 10) * 10

# Agrupar por participante e d√©cada
decadas_por_participante = df_filtrado.groupby(['Assistido por', 'D√©cada']).size().unstack(fill_value=0)

# Configurar o gr√°fico
plt.figure(figsize=(14, 8))

# Gr√°fico de barras empilhadas
decadas_por_participante.plot(
    kind='barh',
    stacked=True,
    colormap='viridis',
    edgecolor='black',
    linewidth=0.5,
    width=0.85
)

# Ajustes est√©ticos
plt.title('Distribui√ß√£o de D√©cadas Assistidas por Participante', pad=20, fontsize=14, fontweight='bold')
plt.xlabel('Quantidade de Filmes', labelpad=10)
plt.ylabel('Participante', labelpad=10)
plt.legend(title='D√©cada', bbox_to_anchor=(1.05, 1), loc='upper left')

# Adicionar valores nas barras (vers√£o simplificada)
for i, (idx, row) in enumerate(decadas_por_participante.iterrows()):
    total = row.sum()
    plt.text(total + 0.5, i, f'{total}', va='center', fontweight='bold')

plt.grid(axis='x', linestyle='--', alpha=0.7)
sns.despine(left=True, bottom=True)
plt.tight_layout()
plt.show()

# Vers√£o em tabela para refer√™ncia
print("\nTabela de Refer√™ncia (Filmes por D√©cada e Participante):")
display(decadas_por_participante.style.background_gradient(cmap='viridis', axis=1))

C√âLULA 9 (PA√çSES ASSISTIDOS - VIS√ÉO GERAL):

# --- Preparar dados ---
df_unicos = df.drop_duplicates(subset=['T√≠tulo original'])
df_paises = df_unicos.assign(Pa√≠s=df_unicos['Pa√≠s'].str.split(', '))
df_paises = df_paises.explode('Pa√≠s')

contagem_paises = df_paises['Pa√≠s'].value_counts()

# Filtrar top pa√≠ses
limite = 2
paises_top = contagem_paises[contagem_paises >= limite]
paises_1 = contagem_paises[contagem_paises == 1].index.tolist()

# DataFrame para plot
df_paises_plot = paises_top.reset_index()
df_paises_plot.columns = ['Pa√≠s', 'Quantidade']
df_paises_plot = df_paises_plot.sort_values('Quantidade', ascending=True)

# Paleta de cores (verde no mais frequente)
cores = sns.color_palette("crest", n_colors=len(df_paises_plot))
cores[-1] = (0.0, 0.6, 0.3)

# --- Plot ---
plt.figure(figsize=(10, 6))
sns.barplot(
    data=df_paises_plot,
    x='Quantidade',
    y='Pa√≠s',
    hue='Pa√≠s',
    palette=cores,
    dodge=False,
    legend=False
)

# R√≥tulos com valores e %
total_filmes = contagem_paises.sum()
for index, value in enumerate(df_paises_plot['Quantidade']):
    plt.text(value + 0.1, index, f"{value} ({value/total_filmes:.1%})", va='center')

plt.title('Filmes por Pa√≠s de Origem', fontsize=14, weight='bold')
plt.xlabel('Quantidade de Filmes')
plt.ylabel('')
plt.tight_layout()
plt.show()

# --- Imprimir pa√≠ses com apenas 1 filme ---
if paises_1:
    print("Pa√≠ses com apenas 1 filme:")
    print(", ".join(paises_1))


C√âLULA 10 (PA√çSES ASSISTIDOS POR PARTICIPANTE):

# Criar DataFrame expandido por pa√≠s
df_expandido = df.assign(Pa√≠s=df['Pa√≠s'].str.split(', ')).explode('Pa√≠s')

# Agrupar por participante e contar pa√≠ses
paises_por_participante = df_expandido.groupby('Assistido por')['Pa√≠s'].apply(list)

## Fun√ß√£o para plotar gr√°fico de pizza por participante
def plot_paises_participante(participante, paises):
    # Contar ocorr√™ncias de cada pa√≠s
    contagem = Counter(paises)
    paises_top = [p[0] for p in contagem.most_common(4) if p[1] > 1]
    outros = [p for p in contagem if p not in paises_top]
    
    # Preparar dados para o gr√°fico
    dados = {}
    for p in paises_top:
        dados[p] = contagem[p]
    if outros:
        dados['Outros'] = sum(contagem[p] for p in outros)
    
    # Criar gr√°fico
    fig, ax = plt.subplots(figsize=(8, 6))
    wedges, texts, autotexts = ax.pie(
        dados.values(),
        labels=dados.keys(),
        autopct='%1.1f%%',
        startangle=90,
        colors=sns.color_palette("pastel"),
        textprops={'fontsize': 10}
    )
    
    # Melhorar legibilidade
    plt.setp(autotexts, size=10, weight="bold")
    ax.set_title(f'Distribui√ß√£o de Pa√≠ses Assistidos por {participante}', 
                 pad=20, fontsize=12)
    plt.tight_layout()
    plt.show()
    
    # Listar pa√≠ses √∫nicos (para refer√™ncia)
    print(f"\nPa√≠ses assistidos por {participante}:")
    print(", ".join(sorted(contagem.keys())))

## Gerar gr√°ficos para cada participante
for participante, paises in paises_por_participante.items():
    plot_paises_participante(participante, paises)
    print("\n" + "="*60 + "\n")

## Vers√£o consolidada (todos participantes juntos)
print("\n=== VIS√ÉO CONSOLIDADA ===")
contagem_total = Counter(df_expandido['Pa√≠s'])
print("\nTotal de filmes por pa√≠s (todos participantes):")
for pais, qtd in contagem_total.most_common():
    print(f"{pais}: {qtd} filme{'s' if qtd > 1 else ''}")

print("\nParticipantes que assistiram filmes de cada pa√≠s:")
for pais in contagem_total:
    participantes = df_expandido[df_expandido['Pa√≠s'] == pais]['Assistido por'].unique()
    print(f"{pais}: {', '.join(participantes)}")

C√âLULA 11 (PROPOR√á√ÉO DE ANIMA√á√ïES):

## Configura√ß√µes iniciais
plt.style.use('ggplot')

# Filtrar para excluir os participantes indesejados
participantes_excluidos = ['aNobree', 'Tunim73']
df_filtrado = df[~df['Assistido por'].isin(participantes_excluidos)]

## An√°lise da propor√ß√£o de anima√ß√µes (com dados filtrados)
total_filmes = len(df_filtrado)
animacoes = df_filtrado['Flag'].sum()
nao_animacoes = total_filmes - animacoes

# Dados para o gr√°fico
labels = ['Anima√ß√£o', 'N√£o-Anima√ß√£o']
sizes = [animacoes, nao_animacoes]
colors = ['#ff9999', '#66b3ff']
explode = (0.1, 0)  # destaque para anima√ß√µes

# Gr√°fico de pizza
fig1, ax1 = plt.subplots(figsize=(8, 6))
ax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',
        shadow=True, startangle=90, textprops={'fontsize': 12})
ax1.axis('equal')
plt.title('Propor√ß√£o de Filmes de Anima√ß√£o (Exceto aNobree e Tunim73)', pad=20, fontsize=14)
plt.tight_layout()

## An√°lise por participante (com dados filtrados)
animacoes_por_pessoa = df_filtrado[df_filtrado['Flag'] == 1]['Assistido por'].value_counts()

# Gr√°fico de barras
fig2, ax2 = plt.subplots(figsize=(10, 6))
animacoes_por_pessoa.plot(kind='barh', color='#2ca02c')
ax2.set_title('Anima√ß√µes Assistidas por Participante', pad=20, fontsize=14)
ax2.set_xlabel('N√∫mero de Anima√ß√µes Assistidas')
ax2.set_ylabel('Participante')

# Adicionar valores nas barras
for i, v in enumerate(animacoes_por_pessoa):
    ax2.text(v + 0.1, i, str(v), color='black', va='center')

plt.tight_layout()
plt.show()

## Resultados num√©ricos atualizados
print("\n=== RESUMO ESTAT√çSTICO (FILTRADO) ===")
print(f"Total de filmes na lista (filtrada): {total_filmes}")
print(f"Filmes de anima√ß√£o: {animacoes} ({animacoes/total_filmes:.1%})")
print(f"Filmes que n√£o s√£o anima√ß√£o: {nao_animacoes} ({nao_animacoes/total_filmes:.1%})")

print("\n=== ANIMA√á√ïES POR PARTICIPANTE (FILTRADO) ===")
print(animacoes_por_pessoa.to_string())